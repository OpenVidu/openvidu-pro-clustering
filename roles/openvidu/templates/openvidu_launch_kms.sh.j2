#!/bin/bash 
set -e -o pipefail

# Set debug mode
DEBUG=${DEBUG:-false}
[ "$DEBUG" == "true" ] && set -x

source /opt/openvidu/cluster/openvidu.rc 

TMPFILE=$(mktemp -t openvidu-userdata-XXX --suffix .txt)
OUTPUT=$(mktemp -t openvidu-launch-kms-XXX --suffix .json)
ERROUTPUT=$(mktemp -t openvidu-launch-kms-XXX --suffix .err)

trap exit_on_error ERR

exit_on_error () {
  ERROR_TYPE=$(cat ${ERROUTPUT} | awk '{ print $4 }' | sed -r 's/\(|\)//g' | tr -d '\n')

  case ${ERROR_TYPE}
  in
    "InvalidParameterValue")
      echo -e "Parameter invalid " $(cat ${ERROUTPUT}) >&2
      exit 1
      ;;

    "UnauthorizedOperation")
      MSG_COD=$(cat ${ERROUTPUT} | awk -F: '{ print $3 }')
      MSG_DEC=$(aws sts decode-authorization-message --encoded-message ${MSG_COD})

      echo -e "Unauthorized " $(cat ${MSG_DEC}) >&2
      exit 1
      ;;
    *)
      echo -e "Unknown error " $(cat ${ERROUTPUT}) >&2
      exit 1
      ;;
  esac
}

cat >${TMPFILE}<<FDF
#!/bin/bash -xe

cd /usr/src/openvidu

export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
OPENVIDU_IP=\$(aws ec2 describe-instances --query 'Reservations[].Instances[].[PublicIpAddress]' --output text --filters Name=instance-state-name,Values=running Name=tag:ov-cluster-member,Values=server)

cp group_vars/all.cf group_vars/all

sed -i "s/OPENVIDU_INSTANCE_PUBLIC_IP/\$OPENVIDU_IP/" group_vars/all
sed -i "s/MY_SECRET/${OPENVIDU_SECRET}/" group_vars/all
sed -i "s/KURENTO_MIN_PORT/40000/" group_vars/all
sed -i "s/KURENTO_MAX_PORT/65535/" group_vars/all

# Running in MarketPlace
sed -i "s/install_software: true/install_software: false/" roles/kms/vars/main.yml
sed -i "s/install_software: true/install_software: false/" roles/file-server/vars/main.yml

cat>play.yaml<<EOF
- hosts: all
  roles:
    - kms
    - file-server
EOF

ansible-playbook -i "localhost," -c local play.yaml 
FDF

aws ec2 run-instances \
    --image-id ${IMAGE_ID} --count 1 \
    --instance-type ${INSTANCE_TYPE} \
    --key-name ${KEY_NAME} \
    --subnet-id ${SUBNET_ID} \
    --tag-specifications 'ResourceType=instance,Tags=[{Key="Name",Value="Kurento Media Server"},{Key="ov-cluster-member",Value="kms"}]' \
    --user-data file://${TMPFILE} \
    --iam-instance-profile Name="OpenViduInstanceProfile-${STACK_NAME}-${STACK_REGION}" \
    --security-group-ids ${SECURITY_GROUP} > ${OUTPUT} 2> ${ERROUTPUT}

aws ec2 wait instance-running --instance-ids $(cat ${OUTPUT} | jq --raw-output ' .Instances[] | .InstanceId')

# Generating the output
KMS_IP=$(cat ${OUTPUT} | jq --raw-output ' .Instances[] | .NetworkInterfaces[0] | .PrivateIpAddress')
KMS_ID=$(cat ${OUTPUT} | jq --raw-output ' .Instances[] | .InstanceId')

jq -n \
  --arg id "${KMS_ID}" \
  --arg ip "${KMS_IP}" \
  '{ id: $id, ip: $ip }'

