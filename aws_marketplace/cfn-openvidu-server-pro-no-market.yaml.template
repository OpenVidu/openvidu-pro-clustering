---
AWSTemplateFormatVersion: 2010-09-09
Description: Openvidu Pro CloudFormation template

Parameters:

  # Domain and SSL certificate configuration

  WhichCert:
    Description: >
      [selfsigned] Self signed certificate. Not recommended for production use.
      [owncert] Valid certificate purchased in a Internet services company.
      [letsencrypt] Generate a new certificate using Let's Encrypt.
    Type: String
    AllowedValues:
      - selfsigned
      - owncert
      - letsencrypt
    Default: selfsigned

  PublicElasticIP:
    Description: "Previously created AWS Elastic IP to associate it to the OpenVidu EC2 instance. If certificate type is 'selfsigned' this value is optional. If certificate type is 'owncert' or 'letsencrypt' this value is mandatory. Example 13.33.145.23."
    Type: String
    AllowedPattern: ^([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])$

  MyDomainName:
    Description: "Valid domain name pointing to previous IP. If certificate type is 'selfsigned' this value is optional. If certificate type is 'owncert' or 'letsencrypt' this value is mandatory. Example: openvidu.company.com"
    Type: String
    AllowedPattern: ^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$

  OwnCertCRT:
    Description: "If certificate type is 'owncert' this is the URL where CRT file will be downloaded"
    Type: String

  OwnCertKEY:
    Description: "If certificate type is 'owncert' this is the URL where KEY file will be downloaded"
    Type: String

  LetsEncryptEmail:
    Description: "If certificate type is 'letsencrypt', this email will be used for Let's Encrypt notifications"
    Type: String

  # OpenVidu Configuration

  OpenViduLicense:
    Description: "Visit https://openvidu.io/account"
    Type: String
    AllowedPattern: ^(?!\s*$).+$
    NoEcho: true
    ConstraintDescription: OpenVidu Pro License is mandatory

  OpenViduSecret:
    Description: "Secret to connect to this OpenVidu Platform. No whitespaces or quotations allowed"
    Type: String
    AllowedPattern: ^((?!")(?! ).)+$
    NoEcho: true
    ConstraintDescription: OpenVidu Secret is mandatory (no whitespaces or quotations allowed)

  MediaNodesStartNumber:
    Description: "How many Media Nodes do you want on startup (EC2 instances will be launched)"
    Type: Number
    Default: 1

  # Kibana configuration

  KibanaUser:
    Description: "Username for Kibana Dashboard"
    Type: String
    AllowedPattern: ^((?!")(?! ).)+$
    ConstraintDescription: Kibana user is mandatory (no whitespaces or quotations allowed)
    Default: kibanaadmin

  KibanaPassword:
    Description: "Password for Kibana Dashboard"
    Type: String
    AllowedPattern: ^((?!")(?! ).)+$
    NoEcho: true
    ConstraintDescription: Kibana password is mandatory (no whitespaces or quotations allowed)

  # EC2 Instance configuration

  AwsInstanceTypeOV:
    Description: "Specifies the EC2 instance type for your OpenVidu Server Pro Node"
    Type: String
    Default: t2.xlarge
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type"

  AwsInstanceTypeKMS:
    Description: "Specifies the EC2 instance type for your Media Nodes"
    Type: String
    Default: t2.xlarge
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    ConstraintDescription: "Must be a valid EC2 instance type"

  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance. It is mandatory to perform some administrative tasks of OpenVidu."
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: "must be the name of an existing EC2 KeyPair"

  # Networking configuration

  OpenViduVPC:
    Description: "Dedicated VPC for OpenVidu cluster"
    Type: AWS::EC2::VPC::Id

  OpenViduSubnet:
    Description: "Subnet for OpenVidu cluster"
    Type: AWS::EC2::Subnet::Id

  # Other configuration

  WantToDeployDemos:
    Description: "Choose if you want to deploy OpenVidu Call application alongside OpenVidu platform." 
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

Mappings:
  OVAMIMAP:
    eu-west-1:
      AMI: OV_AMI_ID

  KMSAMIMAP:
    eu-west-1:
      AMI: KMS_AMI_ID

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Domain and SSL certificate configuration
        Parameters:
          - WhichCert
          - PublicElasticIP
          - MyDomainName
          - OwnCertCRT
          - OwnCertKEY
          - LetsEncryptEmail
      - Label:
          default: OpenVidu configuration
        Parameters:
          - OpenViduLicense
          - MediaNodesStartNumber
          - OpenViduSecret
      - Label:
          default: Kibana configuration
        Parameters:
          - KibanaUser
          - KibanaPassword
      - Label:
            default: EC2 Instance configuration
        Parameters:
            - AwsInstanceTypeOV
            - AwsInstanceTypeKMS
            - KeyName
      - Label:
          default: Networking configuration
        Parameters:
          - OpenViduVPC
          - OpenViduSubnet
      - Label:
          default: Other configuration
        Parameters:
          - WantToDeployDemos

    ParameterLabels:
      # SSL certificate configuration
      WhichCert:
        default: "Certificate Type"
      PublicElasticIP:
        default: "AWS Elastic IP (EIP)"
      MyDomainName:
        default: "Domain Name pointing to Elastic IP"
      OwnCertCRT:
        default: "URL to the CRT file (owncert)"
      OwnCertKEY:
        default: "URL to the key file (owncert)"
      LetsEncryptEmail:
        default: "Email for Let's Encrypt (letsencrypt)"
      # OpenVidu configuration
      OpenViduLicense:
        default: "OpenVidu Pro License key"
      MediaNodesStartNumber:
        default: "Initial number of Media Node in your cluster"
      OpenViduSecret:
        default: "Openvidu Secret"
      # Kibana configuration
      KibanaUser:
        default: "Kibana username"
      KibanaPassword:
        default: "Kibana password"
      # EC2 instance configuration
      AwsInstanceTypeOV:
        default: "Instance type for Openvidu Server Pro Node"
      AwsInstanceTypeKMS:
        default: "Instance type for Media Nodes"
      KeyName:
        default: "SSH Key"
      # Networking configuration
      OpenViduVPC:
        default: "OpenVidu VPC"
      OpenViduSubnet:
        default: "OpenVidu Subnet"
      # Other configuration
      WantToDeployDemos:
        default: "Deploy OpenVidu Call application"

Conditions:
  NoSelfSigned:
    'Fn::Not':
      - 'Fn::Or':
        - 'Fn::Equals':
            - Ref: WhichCert
            - selfsigned
        - 'Fn::Equals':
            - Ref: WhichCert
            - customcert

Resources:

  OpenViduManageEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: OpenViduManageEC2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:RunInstances'
                  - 'ec2:TerminateInstances'
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeSecurityGroups'
                  - 'iam:PassRole'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:ListHostedZones'
                Resource: '*'
      RoleName: !Join [ "-", [ OpenViduManageEC2Role, !Ref 'AWS::StackName', !Ref 'AWS::Region'] ]

  OpenviduInstancesProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join [ "-", [ OpenViduInstanceProfile, !Ref 'AWS::StackName', !Ref 'AWS::Region'] ]
      Path: /
      Roles:
        - !Join [ "-", [ OpenViduManageEC2Role, !Ref 'AWS::StackName', !Ref 'AWS::Region'] ]
    DependsOn:
      - OpenViduManageEC2Role

  OpenViduServer:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: OpenVidu Pro
      AWS::CloudFormation::Init:
        config:
          files:
            '/usr/local/bin/check_app_ready.sh':
              content: |
                #!/bin/bash 
                while true; do 
                  HTTP_STATUS=$(curl -Ik http://localhost:5443/ | head -n1 | awk '{print $2}')
                  if [ $HTTP_STATUS == 200 ]; then
                    break
                  fi
                  sleep 5
                done
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/feedGroupVars.sh':
              content: !Sub
              - |
                #!/bin/bash -xe

                WORKINGDIR=/opt/openvidu

                # Pro License
                sed -i "s/OPENVIDU_PRO_LICENSE=/OPENVIDU_PRO_LICENSE=${OpenViduLicense}/" $WORKINGDIR/.env

                # Replace secret
                sed -i "s/OPENVIDU_SECRET=/OPENVIDU_SECRET=${OpenViduSecret}/" $WORKINGDIR/.env

                # Replace domain name
                if [[ "${WhichCert}" == "letsencrypt" || "${WhichCert}" == "owncert" ]]; then
                  sed -i "s/OPENVIDU_DOMAIN_OR_PUBLIC_IP=/OPENVIDU_DOMAIN_OR_PUBLIC_IP=${MyDomainName}/" $WORKINGDIR/.env
                else
                  [ ! -d "/usr/share/openvidu" ] && mkdir -p /usr/share/openvidu
                  PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                  sed -i "s/OPENVIDU_DOMAIN_OR_PUBLIC_IP=/OPENVIDU_DOMAIN_OR_PUBLIC_IP=$PublicHostname/" $WORKINGDIR/.env
                  echo $PublicHostname > /usr/share/openvidu/old-host-name
                fi

                # Openvidu Pro mode
                sed -i "s/OPENVIDU_PRO_CLUSTER_MODE=manual/OPENVIDU_PRO_CLUSTER_MODE=auto/" $WORKINGDIR/.env

                # Openvidu Pro Media Nodes
                sed -i "s/#OPENVIDU_PRO_CLUSTER_MEDIA_NODES=/OPENVIDU_PRO_CLUSTER_MEDIA_NODES=${MediaNodesStartNumber}/" $WORKINGDIR/.env

                # Openvidu Pro enviroment
                sed -i "s/OPENVIDU_PRO_CLUSTER_ENVIRONMENT=on_premise/OPENVIDU_PRO_CLUSTER_ENVIRONMENT=aws/" $WORKINGDIR/.env

                # Replace certificated type
                sed -i "s/CERTIFICATE_TYPE=selfsigned/CERTIFICATE_TYPE=${WhichCert}/" $WORKINGDIR/.env
                sed -i "s/LETSENCRYPT_EMAIL=user@example.com/LETSENCRYPT_EMAIL=${LetsEncryptEmail}/" $WORKINGDIR/.env  

                # Replace Kibana Conf
                sed -i "s/KIBANA_USER=kibanaadmin/KIBANA_USER=${KibanaUser}/" $WORKINGDIR/.env
                sed -i "s/KIBANA_PASSWORD=/KIBANA_PASSWORD=${KibanaPassword}/" $WORKINGDIR/.env

                # Replace vars AWS
                sed -i "s/#AWS_DEFAULT_REGION=/AWS_DEFAULT_REGION=${AWS::Region}/" $WORKINGDIR/.env
                sed -i "s/#AWS_IMAGE_ID=/AWS_IMAGE_ID=${kmsAmi}/" $WORKINGDIR/.env
                sed -i "s/#AWS_INSTANCE_TYPE=/AWS_INSTANCE_TYPE=${AwsInstanceTypeKMS}/" $WORKINGDIR/.env
                sed -i "s/#AWS_KEY_NAME=/AWS_KEY_NAME=${KeyName}/" $WORKINGDIR/.env
                sed -i "s/#AWS_SUBNET_ID=/AWS_SUBNET_ID=${OpenViduSubnet}/" $WORKINGDIR/.env
                sed -i "s/#AWS_STACK_ID=/AWS_STACK_ID=$(echo ${AWS::StackId} | sed 's#/#\\/#g')/" $WORKINGDIR/.env
                sed -i "s/#AWS_STACK_NAME=/AWS_STACK_NAME=${AWS::StackName}/" $WORKINGDIR/.env

                SECGRPID=$(docker run --rm amazon/aws-cli:2.0.7 ec2 describe-security-groups \
                               --output text \
                               --filters "Name=tag:aws:cloudformation:logical-id,Values=KMSSecurityGroup" \
                                         "Name=tag:aws:cloudformation:stack-id,Values=${AWS::StackId}" \
                               --query 'SecurityGroups[].GroupId[]'
                )
                sed -i "s/#AWS_SECURITY_GROUP=/AWS_SECURITY_GROUP=$SECGRPID/" $WORKINGDIR/.env

                # Without Demos
                if [ "${WantToDeployDemos}" == "false" ]; then
                  sed -i "s/WITH_DEMOS=true/WITH_DEMOS=false/" $WORKINGDIR/docker-compose.yml
                  rm $WORKINGDIR/docker-compose.override.yml
                fi
              - kmsAmi: !FindInMap [KMSAMIMAP, !Ref 'AWS::Region', AMI]
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/buildCerts.sh':
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/opt/openvidu
                wget -O $WORKINGDIR/owncert/certificate.cert ${OwnCertCRT}
                wget -O $WORKINGDIR/owncert/certificate.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/checkAmazonURL.sh':
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/opt/openvidu

                if [ "${WhichCert}" == "selfsigned" ]; then
                  OldPublicHostname=$(cat /usr/share/openvidu/old-host-name)
                  PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                  sed -i "s/$OldPublicHostname/$PublicHostname/" $WORKINGDIR/.env
                  echo $PublicHostname > /usr/share/openvidu/old-host-name
                fi
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/restartCE.sh':
              content: !Sub |
                #!/bin/bash -x
                # Get new amazon URL
                /usr/local/bin/checkAmazonURL.sh

                # Restart all services
                pushd /opt/openvidu
                docker-compose up -d
                popd
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !FindInMap [OVAMIMAP, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref AwsInstanceTypeOV
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref OpenviduInstancesProfile
      SubnetId: !Ref OpenViduSubnet
      SecurityGroupIds:
        - !GetAtt 'OpenViduSecurityGroup.GroupId'
      Tags:
        - Key: Name
          Value: 'OpenVidu Server'
        - Key: 'ov-cluster-member'
          Value: 'server'
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenViduServer

            # Replace .env variables
            /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }

            # Launch on reboot
            echo "@reboot /usr/local/bin/restartCE.sh" | crontab
            
            # Download certs if "WichCert" mode
            if [ "${WhichCert}" == "owncert" ]; then
              /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
            fi

            # Start openvidu application
            pushd /opt/openvidu
            docker-compose up -d
            popd

            # Wait for the app
            /usr/local/bin/check_app_ready.sh

            # sending the finish call
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 50

  KMSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref OpenViduVPC
      GroupDescription: SSH, Proxy and KMS WebRTC Ports
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join [ "/", [ !GetAtt OpenViduServer.PrivateIp, "32" ] ]
        - IpProtocol: tcp
          FromPort: 8888
          ToPort: 8888
          CidrIp: !Join [ "/", [ !GetAtt OpenViduServer.PrivateIp, "32" ] ]
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  OpenViduSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH, Proxy and OpenVidu WebRTC Ports
      VpcId: !Ref OpenViduVPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT25M
        Count: 1

  MyEIP:
    Type: AWS::EC2::EIPAssociation
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenViduServer
      EIP: !Ref PublicElasticIP

Outputs:
  OpenViduInspector:
    Description: "Use this URL to connect OpenVidu with user and password"
    Value: !Join
        - ''
        - - 'https://'
          - !GetAtt OpenViduServer.PublicDnsName
          - '/inspector'

  OpenViduInspectorLE:
    Description: "Use this URL to connect to OpenVidu with user and password if you're using Let's Encrypt"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - '/inspector'
    Condition: NoSelfSigned

  Kibana:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !GetAtt OpenViduServer.PublicDnsName
          - '/kibana'

  KibanaLE:
    Description: "Check out graph and performance of your OpenVidu installation"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - '/kibana'
    Condition: NoSelfSigned
