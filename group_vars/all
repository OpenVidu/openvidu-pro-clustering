###########################################
# OpenVidu License
###########################################

# Parameter "openvidu.pro.license"
openvidu_license:

###########################################
# OpenVidu Server CE configuration parameters
###########################################

# See https://docs.openvidu.io/en/stable/reference-docs/openvidu-config

# Which OpenVidu version to use
# Check out https://github.com/OpenVidu/openvidu/releases
openvidu_version:

# A comma separate list of private IPs from the KMS instances
# This IPs of media servers should be reachable from OpenVidu
# to port 8888 AND not to be publicly accessible.
# i.e. 192.168.0.5,192.168.0.6
kms_private_ips:

# Parameter "openvidu.secret"
# Use this to connect to OpenVidu endpoint
openvidu_secret: "MY_SECRET"

# Parameter "openvidu.publicurl"
# For selfsigned certificate, type the public domain name
# We use this value to access OpenVidu Inspector and Kibana Dashboard
# Use only the domain name, without port or scheme.
# i. e. openvidu.example.com
openvidu_publicurl:

# Parameter "openvidu.cdr"
# Call Detail Record enabled
# Whether to enable Call Detail Record or not
# Values: true | false
openvidu_cdr: false

# Parameter "openvidu.recording.autostop-timeout"
# Timeout in seconds for recordings to automatically stop (and the session involved to be closed)
# when conditions are met: a session recording is started but no user is publishing to it or a session
# is being recorded and last user disconnects. If a user publishes within the timeout in either case,
# the automatic stop of the recording is cancelled
# 0 means no timeout
openvidu_recording_timeout: 120

# Parameter "openvidu.recording.public-access"
# if true any client can connect to
# https://OPENVIDU_SERVER_IP:OPENVIDU_PORT/recordings/any_session_file.mp4
# and access any recorded video file. If false this path will be secured with
# openvidu.secret param just as OpenVidu Server dashboard at
# https://OPENVIDU_SERVER_IP:OPENVIDU_PORT
# Values: true | false
openvidu_recording_public_access: true

# Parameter "openvidu.recording.notification"
# Which users should receive the recording events in the client side
# (recordingStarted, recordingStopped). Can be all (every user connected to
# the session), publisher_moderator (users with role 'PUBLISHER' or
# 'MODERATOR'), moderator (only users with role 'MODERATOR') or none
# (no user will receive these events)
openvidu_recording_notification: all

# Parameter "openvidu.streams.video.max-recv-bandwidth"
# Maximum video bandwidth sent from clients to OpenVidu Server, in kbps.
# 0 means unconstrained
openvidu_streams_video_max_recv_bandwidth: 0

# Parameter "openvidu.streams.video.min-recv-bandwidth"
# Minimum video bandwidth sent from clients to OpenVidu Server, in kbps.
# 0 means unconstrained
openvidu_streams_video_min_recv_bandwidth: 0

# Parameter "openvidu.streams.video.max-send-bandwidth"
# Maximum video bandwidth sent from OpenVidu Server to clients, in kbps.
# 0 means unconstrained
openvidu_streams_video_max_send_bandwidth: 0

# Parameter "openvidu.streams.video.min-send-bandwidth"
# Minimum video bandwidth sent from OpenVidu Server to clients, in kbps.
# 0 means unconstrained
openvidu_streams_video_min_send_bandwidth: 0

# Parameter "openvidu.webhook"
# true to enable OpenVidu Webhook service. false' otherwise
# Values: true | false
openvidu_webhook: false

# Parameter "openvidu.webhook.endpoint"
# HTTP endpoint where OpenVidu Server will send Webhook HTTP POST messages
# Must be a valid URL: http(s)://ENDPOINT
openvidu_webhook_endpoint: http(s)://ENDPOINT

# Parameter "openvidu.webhook.headers"
# List of headers that OpenVidu Webhook service will attach to HTTP POST messages
# Example:
# openvidu_webhook_headers: "Authorization: Basic T1BFTlZJRFVBUFA6TVlfU0VDUkVU"
openvidu_webhook_headers:

# Parameter "openvidu.webhook.events"
# List of events that will be sent by OpenVidu Webhook service
# openvidu_webhook_events: "sessionCreated,sessionDestroyed,participantJoined,participantLeft,webrtcConnectionCreated,webrtcConnectionDestroyed,recordingStatusChanged,filterEventDispatched,mediaNodeStatusChanged"
openvidu_webhook_events:

###########################################
# OpenVidu Server Pro configuration parameters
###########################################

# See https://docs.openvidu.io/en/stable/openvidu-pro/reference-docs/openvidu-pro-config

# Parameter "openvidu.pro.cluster"
# Is running in cluster?
# Values: true | false
openvidu_pro_cluster: true

# Parameter "openvidu.pro.cluster.load-strategy"
# What parameter should be used to distribute the creation of new sessions
# (and therefore distribution of load) among all available KMSs.
# Can be: [streams, sessions, mediaObjects]
openvidu_pro_cluster_load_strategy: streams

# Parameter "openvidu.pro.cluster.media-nodes"
# How many media servers do you want to start with the deployment.
# If set to zero no media servers will be lauched.
# Type: number >= 0
openvidu_pro_cluster_media_nodes:

# Parameter "openvidu.pro.cluster.environment"
# Which environment are you using
# Possibles values: aws, on_premise
openvidu_pro_cluster_environment: on_premise

##########################
# Instances IPs and names
##########################

# Should be the same than in the inventory file
# We use this value for proxying
openvidu_public_ip:

# Certificate type
# You can choose:
# 1. Self Signed (selfsigned) The certificate will be generate within
#    the instance (default)
# 2. Let's encrypt (letsencrypt) Free SSL certificate provider
# 3. Your own certificate (owncert) If you own a SSL certificate, use this one.
#    You need to provide your certificate files (nginx.key and nginx.crt) and
#    put then in roles/nginx/files folder.
whichcert: selfsigned

# Your custom domain name i.e. openvidu.example.com
# If you're using OwnCert or Let's Encrypt type here your FQDN
domain_name: cluster.openvidu.io

# Let's Encrypt email to receive notifications
letsencrypt_email:

# Port configuration
# We divide port range in two, half for Coturn Server and the other half
# for Kurento Server. Replace according to your needs:
# i.e. 1024 ~ 32255 for coturn and 32256 ~ 65535 for KMS

# Turn port config
turn_min_port: 40000
turn_max_port: 65535

# Kurento port config
kurento_min_port: 40000
kurento_max_port: 65535

##########################
# Kibana And ElasticSearch Configuration
##########################

# Kibana dashboard configuration (Credentials)
kibana_user: kibanaadmin
kibana_password: "MY_SECRET"

##########################
# On premises config
##########################

# Cloud providers like AWS or OpenStack set up
# ubuntu user without password. Put your own user
# if you're using another provider or bare metal
openvidu_user: ubuntu
openvidu_group: ubuntu

##########################
# Cloudformation configuration
##########################

# If you're working outside AWS ignore this section
run_ec2: false
aws_default_region: AWS_DEFAULT_REGION
no_internet: false
